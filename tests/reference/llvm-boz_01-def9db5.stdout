; ModuleID = 'LFortran'
source_filename = "LFortran"

%string_descriptor = type <{ i8*, i64 }>

@string_const_data = private constant [5 x i8] c"STOP\00"
@string_const = private global %string_descriptor <{ i8* getelementptr inbounds ([5 x i8], [5 x i8]* @string_const_data, i32 0, i32 0), i64 4 }>
@string_const_data.1 = private constant [2 x i8] c"\0A\00"
@string_const.2 = private global %string_descriptor <{ i8* getelementptr inbounds ([2 x i8], [2 x i8]* @string_const_data.1, i32 0, i32 0), i64 1 }>
@0 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [9 x i8] c"I4,I4,I4\00", align 1
@2 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define i32 @main(i32 %0, i8** %1) {
.entry:
  %boz_1 = alloca i32, align 4
  %boz_2 = alloca i32, align 4
  %boz_3 = alloca i32, align 4
  %boz_4 = alloca i32, align 4
  %boz_5 = alloca i32, align 4
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %boz_11 = alloca i32, align 4
  %boz_22 = alloca i32, align 4
  %boz_33 = alloca i32, align 4
  %boz_44 = alloca i32, align 4
  %boz_55 = alloca i32, align 4
  store i32 93, i32* %boz_11, align 4
  store i32 1255, i32* %boz_22, align 4
  store i32 2748, i32* %boz_33, align 4
  store i32 180150001, i32* %boz_44, align 4
  store i32 180150001, i32* %boz_55, align 4
  %2 = load i32, i32* %boz_44, align 4
  %3 = load i32, i32* %boz_55, align 4
  %4 = icmp ne i32 %2, %3
  br i1 %4, label %then, label %else

then:                                             ; preds = %.entry
  %5 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const, i32 0, i32 0), align 8
  %6 = load i8*, i8** getelementptr inbounds (%string_descriptor, %string_descriptor* @string_const.2, i32 0, i32 0), align 8
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i8* %5, i8* %6)
  call void @exit(i32 0)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %7 = call i8* (i8*, i64, i8*, i32, i32, ...) @_lcompilers_string_format_fortran(i8* null, i64 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @serialization_info, i32 0, i32 0), i32 0, i32 0, i32* %boz_11, i32* %boz_22, i32* %boz_33)
  %8 = call i64 @_lfortran_str_len(i8* %7)
  %9 = call i8* @_lfortran_malloc(i64 16)
  %stringFormat_desc = bitcast i8* %9 to %string_descriptor*
  %10 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  store i8* %7, i8** %10, align 8
  %11 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 1
  store i64 %8, i64* %11, align 4
  %12 = getelementptr %string_descriptor, %string_descriptor* %stringFormat_desc, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i32 0, i32 0), i8* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare i8* @_lcompilers_string_format_fortran(i8*, i64, i8*, i32, i32, ...)

declare i64 @_lfortran_str_len(i8*)

declare i8* @_lfortran_malloc(i64)

declare void @_lfortran_printf(i8*, ...)

declare void @_lpython_free_argv()
